:alias food-x       ve
:alias food-y       vd
:alias head-x       vc
:alias head-y       vb
:alias tail-x       va
:alias tail-y       v9
:alias direction    v8
:alias head-idx     v7
:alias tail-idx     v6
:alias is-game-over v5

:alias compare-temp v4

:const UP    0
:const LEFT  2
:const DOWN  1
:const RIGHT 3

:const K_UP    5
:const K_LEFT  7
:const K_DOWN  8
:const K_RIGHT 9

:const TOP_BOUNDARY 3
:const LEFT_BOUNDARY 2
:const BOTTOM_BOUNDARY 28
:const RIGHT_BOUNDARY 32

: dot 0b1000000

: letter_s 0xF0 0x80 0xF0 0x10 0xF0
: letter_c 0xF0 0x80 0x80 0x80 0xF0
: letter_o 0xF0 0x90 0x90 0x90 0xF0
: letter_r 0xF0 0x90 0xF0 0xA0 0x90
: letter_e 0xF0 0x80 0xF0 0x80 0xF0
: letter_n 0x90 0xD0 0xB0 0x90 0x90
: letter_a 0xF0 0x90 0xF0 0x90 0x90
: letter_k 0x90 0xA0 0xC0 0xA0 0x90

: score 0

: digits 0 0 0

# up, left, down, right
# 0 = inactive
# 1 = just pressed
# 2 = held down
: key-state 0 0 0 0

: place-score
	v0 := 37
	v1 := 6
	i  := letter_s
	sprite v0 v1 5
	v0 += 5
	i  := letter_c
	sprite v0 v1 5
	v0 += 5
	i  := letter_o
	sprite v0 v1 5
	v0 += 5
	i  := letter_r
	sprite v0 v1 5
	v0 += 5
	i  := letter_e
	sprite v0 v1 5

	v0 := 0        # some number 0-255
	i  := digits   # the destination for bcd
	bcd v0         # unpack digits in v0

	v3 := 42       # x position of first digit
	v4 := 14       # y position of first digit
	i := digits
	load v2        # load digits into v0-v2

	i := hex v0    # hundreds digit
	sprite v3 v4 5
	v3 += 5

	i := hex v1    # tens digit
	sprite v3 v4 5
	v3 += 5

	i := hex v2    # ones digit
	sprite v3 v4 5

	return

: increment-score
	# erase current score
	i := score
	load v0
	i  := digits   # the destination for bcd
	bcd v0         # unpack digits in v0

	v3 := 42       # x position of first digit
	v4 := 14       # y position of first digit
	i := digits
	load v2        # load digits into v0-v2

	i := hex v0    # hundreds digit
	sprite v3 v4 5
	v3 += 5

	i := hex v1    # tens digit
	sprite v3 v4 5
	v3 += 5

	i := hex v2    # ones digit
	sprite v3 v4 5

	# print new score
	i := score
	load v0
	v0 += 1
	i := score
	save v0
	i  := digits   # the destination for bcd
	bcd v0         # unpack digits in v0

	v3 := 42       # x position of first digit
	v4 := 14       # y position of first digit
	i := digits
	load v2        # load digits into v0-v2

	i := hex v0    # hundreds digit
	sprite v3 v4 5
	v3 += 5

	i := hex v1    # tens digit
	sprite v3 v4 5
	v3 += 5

	i := hex v2    # ones digit
	sprite v3 v4 5

	return

: place-walls
	i := dot
	v0 := LEFT_BOUNDARY
	v1 := TOP_BOUNDARY
	sprite v0 v1 1
	loop
		v0 += 1
		sprite v0 v1 1
		if v0 != RIGHT_BOUNDARY then
	again
	loop
		v1 += 1
		sprite v0 v1 1
		if v1 != BOTTOM_BOUNDARY then
	again
	loop
		v0 += -1
		sprite v0 v1 1
		if v0 != LEFT_BOUNDARY then
	again
	loop
		v1 += -1
		sprite v0 v1 1
		if v1 != TOP_BOUNDARY then
	again
	sprite v0 v1 1

	return

: place-player
	head-idx := -1
	tail-idx := 0
	head-x := 6
	head-y := 15
	tail-x := 7
	tail-y := 15
	direction := RIGHT

	v1 := 3
	loop
		head-x += 1
		i := dot
		sprite head-x head-y 1
		i := snake-body
		i += head-idx
		v0 := RIGHT
		save v0
		head-idx += 1
		v1 += -1
		if v1 != 0 then again
	return

: place-food
	food-x := random 0b11111
	food-y := random 0b11111
	i := dot
	sprite food-x food-y 1
	if vf == 1 begin
		sprite food-x food-y 1
		jump place-food
	end
	if food-x <= LEFT_BOUNDARY begin
		sprite food-x food-y 1
		jump place-food
	end
	if food-x >= RIGHT_BOUNDARY begin
		sprite food-x food-y 1
		jump place-food
	end
	if food-y <= TOP_BOUNDARY begin
		sprite food-x food-y 1
		jump place-food
	end
	if food-y >= BOTTOM_BOUNDARY begin
		sprite food-x food-y 1
		jump place-food
	end
	return

: get-direction
	# v0 = up
	# v1 = left
	# v2 = down
	# v3 = right

	i := key-state
	load v3

	# check if key is held or released
	if v0 == 1 begin
		v4 := K_UP
		if v4 key begin v0 := 2 else v0 := 0 end
	end
	if v1 == 1 begin
		v4 := K_LEFT
		if v4 key begin v1 := 2 else v1 := 0 end
	end
	if v2 == 1 begin
		v4 := K_DOWN
		if v4 key begin v2 := 2 else v2 := 0 end
	end
	if v3 == 1 begin
		v4 := K_RIGHT
		if v4 key begin v3 := 2 else v3 := 0 end
	end
	
	# check for key press
	if v0 == 0 begin
		v4 := K_UP
		if v4 key then v0 := 1
	end
	if v1 == 0 begin
		v4 := K_LEFT
		if v4 key then v1 := 1
	end
	if v2 == 0 begin
		v4 := K_DOWN
		if v4 key then v2 := 1
	end
	if v3 == 0 begin
		v4 := K_RIGHT
		if v4 key then v3 := 1
	end

	# check for key release
	if v0 == 2 begin
		v4 := K_UP
		if v4 -key then v0 := 0
	end
	if v1 == 2 begin
		v4 := K_LEFT
		if v4 -key then v1 := 0
	end
	if v2 == 2 begin
		v4 := K_DOWN
		if v4 -key then v2 := 0
	end
	if v3 == 2 begin
		v4 := K_RIGHT
		if v4 -key then v3 := 0
	end

	i := key-state
	save v3

	if direction == DOWN begin
		if v1 == 1 begin
			direction := LEFT
			return
		end
		if v3 == 1 begin
			direction := RIGHT
			return
		end
	end
	if direction == RIGHT begin
		if v0 == 1 begin
			direction := UP
			return
		end
		if v2 == 1 begin
			direction := DOWN
			return
		end
	end
	if direction == UP begin
		if v1 == 1 begin
			direction := LEFT
			return
		end
		if v3 == 1 begin
			direction := RIGHT
			return
		end
	end
	if direction == LEFT begin
		if v0 == 1 begin
			direction := UP
			return
		end
		if v2 == 1 begin
			direction := DOWN
			return
		end
	end
	return

: move-player
	# Move head
	if direction == UP then head-y += -1
	if direction == LEFT then head-x += -1
	if direction == DOWN then head-y += 1
	if direction == RIGHT then head-x += 1
	i := dot
	sprite head-x head-y 1
	v2 := vf # check for collision

	# update body data
	v0 := direction
	i := snake-body
	i += head-idx
	save v0
	head-idx += 1
	if head-idx == 255 then head-idx := 0

	# Move tail
	if v2 == 0 begin # head did not collide with something, so erase tail
		i := dot
		sprite tail-x tail-y 1
		i := snake-body
		i += tail-idx
		load v0
		tail-idx += 1
		if tail-idx == 255 then tail-idx := 0
		if v0 == UP then tail-y += -1
		if v0 == LEFT then tail-x += -1
		if v0 == DOWN then tail-y += 1
		if v0 == RIGHT then tail-x += 1
	else # head did collide with something
		v1 := head-x
		v0 := 0b111111
		v1 &= v0
		if v1 == food-x begin
			v1 := head-y
			v0 := 0b11111
			v1 &= v0
			if v1 == food-y begin # collided with food
				i := dot
				sprite head-x head-y 1
				place-food
				increment-score
			end
		else
			game-over
		end
	end

	return

: game-over
	is-game-over := 1
	loop
		v0 := key
		if v0 != 13 then
	again
	clear
	return

: start-screen
	v0 := 20
	v1 := 6
	i  := letter_s
	sprite v0 v1 5
	v0 += 5
	i  := letter_n
	sprite v0 v1 5
	v0 += 5
	i  := letter_a
	sprite v0 v1 5
	v0 += 5
	i  := letter_k
	sprite v0 v1 5
	v0 += 5
	i  := letter_e
	sprite v0 v1 5

	loop
		v0 := key
		if v0 != 8 then
	again
	clear
	return

: setup-game
	is-game-over := 0
	v0 := 0
	i := score
	save v0
	v0 := 0
	v1 := 0
	v2 := 0
	v3 := 0
	i := key-state
	save v3
	place-walls
	place-score
	place-player
	place-food
	return

: play-game
	setup-game
	loop
		loop

		# time sync
		vf := delay
		if vf != 0 then again

		# set clock speed
		vf := 3
		delay := vf

		get-direction
		move-player
		if is-game-over == 1 then jump play-game
	again

: main
	start-screen
	play-game

: snake-body
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: end-snake-body
