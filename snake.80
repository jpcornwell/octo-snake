:alias food-x       ve
:alias food-y       vd
:alias head-x       vc
:alias head-y       vb
:alias tail-x       va
:alias tail-y       v9
:alias direction    v8
:alias head-idx     v7
:alias tail-idx     v6
:alias is-game-over v5

:alias compare-temp v4

:const UP    0
:const LEFT  2
:const DOWN  1
:const RIGHT 3

:const K-UP    5
:const K-LEFT  7
:const K-DOWN  8
:const K-RIGHT 9

:const TOP-BOUNDARY 3
:const LEFT-BOUNDARY 2
:const BOTTOM-BOUNDARY 28
:const RIGHT-BOUNDARY 32

: dot 0b1000000

: letter-s 0xF0 0x80 0xF0 0x10 0xF0
: letter-c 0xF0 0x80 0x80 0x80 0xF0
: letter-o 0xF0 0x90 0x90 0x90 0xF0
: letter-r 0xF0 0x90 0xF0 0xA0 0x90
: letter-e 0xF0 0x80 0xF0 0x80 0xF0
: letter-n 0x90 0xD0 0xB0 0x90 0x90
: letter-a 0xF0 0x90 0xF0 0x90 0x90
: letter-k 0x90 0xA0 0xC0 0xA0 0x90

: score 0

# Storage place for the BCD encoding of score used for printing to the screen
: digits 0 0 0

# key-state represents the up, left, down, and right keys respectively
# 0 = inactive
# 1 = just pressed
# 2 = held down
: key-state 0 0 0 0

# Print the word 'SCORE' and print the initial score value
: place-score
	v0 := 37
	v1 := 6
	i  := letter-s
	sprite v0 v1 5
	v0 += 5
	i  := letter-c
	sprite v0 v1 5
	v0 += 5
	i  := letter-o
	sprite v0 v1 5
	v0 += 5
	i  := letter-r
	sprite v0 v1 5
	v0 += 5
	i  := letter-e
	sprite v0 v1 5

	v0 := 0        # Initial score value
	i  := digits
	bcd v0

	v3 := 42       # x position of first digit
	v4 := 14       # y position of first digit
	i := digits
	load v2

	i := hex v0    # Hundreds digit
	sprite v3 v4 5
	v3 += 5

	i := hex v1    # Tens digit
	sprite v3 v4 5
	v3 += 5

	i := hex v2    # Ones digit
	sprite v3 v4 5

	return

: increment-score
	# Erase current score
	i := score
	load v0
	i  := digits
	bcd v0

	v3 := 42       # x position of first digit
	v4 := 14       # y position of first digit
	i := digits
	load v2

	i := hex v0    # Hundreds digit
	sprite v3 v4 5
	v3 += 5

	i := hex v1    # Tens digit
	sprite v3 v4 5
	v3 += 5

	i := hex v2    # Ones digit
	sprite v3 v4 5

	# Increment score
	i := score
	load v0
	v0 += 1

	# Print new score
	i := score
	save v0
	i  := digits
	bcd v0

	v3 := 42       # x position of first digit
	v4 := 14       # y position of first digit
	i := digits
	load v2

	i := hex v0    # Hundreds digit
	sprite v3 v4 5
	v3 += 5

	i := hex v1    # Tens digit
	sprite v3 v4 5
	v3 += 5

	i := hex v2    # Ones digit
	sprite v3 v4 5

	return

# Place the game boundaries
: place-walls
	i := dot
	v0 := LEFT-BOUNDARY
	v1 := TOP-BOUNDARY
	sprite v0 v1 1
	loop
		v0 += 1
		sprite v0 v1 1
		if v0 != RIGHT-BOUNDARY then
	again
	loop
		v1 += 1
		sprite v0 v1 1
		if v1 != BOTTOM-BOUNDARY then
	again
	loop
		v0 += -1
		sprite v0 v1 1
		if v0 != LEFT-BOUNDARY then
	again
	loop
		v1 += -1
		sprite v0 v1 1
		if v1 != TOP-BOUNDARY then
	again
	sprite v0 v1 1

	return

# Set up the snake data structure and place the player on screen
: place-player
	# This assumes you start with a snake of length 3
	# Set up snake data
	head-idx := 2
	tail-idx := 0
	head-x := 9
	head-y := 15
	tail-x := 7
	tail-y := 15
	i := snake-body
	v0 := RIGHT
	save v0
	save v0
	save v0
	direction := RIGHT

	# Print snake to screen
	v0 := tail-x
	v1 := tail-y
	v2 := 3
	loop
		i := dot
		sprite v0 v1 1
		v0 += 1
		v2 += -1
		if v2 != 0 then again
	return

# Place food in a random position within the game boundaries
: place-food
	food-x := random 0b11111
	food-y := random 0b11111
	i := dot
	sprite food-x food-y 1

	# If food collides with something then retry
	if vf == 1 begin
		sprite food-x food-y 1
		jump place-food
	end
	
	# If food is outside of game boundaries then retry
	if food-x <= LEFT-BOUNDARY begin
		sprite food-x food-y 1
		jump place-food
	end
	if food-x >= RIGHT-BOUNDARY begin
		sprite food-x food-y 1
		jump place-food
	end
	if food-y <= TOP-BOUNDARY begin
		sprite food-x food-y 1
		jump place-food
	end
	if food-y >= BOTTOM-BOUNDARY begin
		sprite food-x food-y 1
		jump place-food
	end
	return

# Get direction input from the player
: get-direction
	# v0 = up
	# v1 = left
	# v2 = down
	# v3 = right

	i := key-state
	load v3

	# Check if key is held or released
	if v0 == 1 begin
		v4 := K-UP
		if v4 key begin v0 := 2 else v0 := 0 end
	end
	if v1 == 1 begin
		v4 := K-LEFT
		if v4 key begin v1 := 2 else v1 := 0 end
	end
	if v2 == 1 begin
		v4 := K-DOWN
		if v4 key begin v2 := 2 else v2 := 0 end
	end
	if v3 == 1 begin
		v4 := K-RIGHT
		if v4 key begin v3 := 2 else v3 := 0 end
	end
	
	# Check for key press
	if v0 == 0 begin
		v4 := K-UP
		if v4 key then v0 := 1
	end
	if v1 == 0 begin
		v4 := K-LEFT
		if v4 key then v1 := 1
	end
	if v2 == 0 begin
		v4 := K-DOWN
		if v4 key then v2 := 1
	end
	if v3 == 0 begin
		v4 := K-RIGHT
		if v4 key then v3 := 1
	end

	# Check for key release
	if v0 == 2 begin
		v4 := K-UP
		if v4 -key then v0 := 0
	end
	if v1 == 2 begin
		v4 := K-LEFT
		if v4 -key then v1 := 0
	end
	if v2 == 2 begin
		v4 := K-DOWN
		if v4 -key then v2 := 0
	end
	if v3 == 2 begin
		v4 := K-RIGHT
		if v4 -key then v3 := 0
	end

	i := key-state
	save v3

	if direction == DOWN begin
		if v1 == 1 begin
			direction := LEFT
			return
		end
		if v3 == 1 begin
			direction := RIGHT
			return
		end
	end
	if direction == RIGHT begin
		if v0 == 1 begin
			direction := UP
			return
		end
		if v2 == 1 begin
			direction := DOWN
			return
		end
	end
	if direction == UP begin
		if v1 == 1 begin
			direction := LEFT
			return
		end
		if v3 == 1 begin
			direction := RIGHT
			return
		end
	end
	if direction == LEFT begin
		if v0 == 1 begin
			direction := UP
			return
		end
		if v2 == 1 begin
			direction := DOWN
			return
		end
	end
	return

# Update the player and check for collisions
: move-player
	# Move head
	if direction == UP then head-y += -1
	if direction == LEFT then head-x += -1
	if direction == DOWN then head-y += 1
	if direction == RIGHT then head-x += 1
	i := dot
	sprite head-x head-y 1
	v2 := vf # check for collision

	# Update snake data
	v0 := direction
	i := snake-body
	i += head-idx
	save v0
	head-idx += 1
	if head-idx == 255 then head-idx := 0

	# Move tail
	if v2 == 0 begin # Head did not collide with anything, so erase the tail
		i := dot
		sprite tail-x tail-y 1
		i := snake-body
		i += tail-idx
		load v0
		tail-idx += 1
		if tail-idx == 255 then tail-idx := 0
		if v0 == UP then tail-y += -1
		if v0 == LEFT then tail-x += -1
		if v0 == DOWN then tail-y += 1
		if v0 == RIGHT then tail-x += 1
	else # Head did collide with something
		v0 := head-x
		v1 := head-y
		v2 := 0 # Represents if player collided with food

		if v0 == food-x begin
			if v1 == food-y begin # Head collided with food
				i := dot
				sprite head-x head-y 1
				place-food
				increment-score
				v2 := 1
			end
		end

		if v2 == 0 then game-over
	end

	return

# Freeze the game and wait for player reset
: game-over
	is-game-over := 1
	loop
		v0 := key
		if v0 != 13 then
	again
	clear
	return

# Print the word 'SNAKE' and wait for player start
: start-screen
	v0 := 20
	v1 := 6
	i  := letter-s
	sprite v0 v1 5
	v0 += 5
	i  := letter-n
	sprite v0 v1 5
	v0 += 5
	i  := letter-a
	sprite v0 v1 5
	v0 += 5
	i  := letter-k
	sprite v0 v1 5
	v0 += 5
	i  := letter-e
	sprite v0 v1 5

	loop
		v0 := key
		if v0 != 8 then
	again
	clear
	return

# Initialize the game data and print starting posistion to screen
: set-up-game
	is-game-over := 0
	v0 := 0
	i := score
	save v0
	v0 := 0
	v1 := 0
	v2 := 0
	v3 := 0
	i := key-state
	save v3
	place-walls
	place-score
	place-player
	place-food
	return

# Main game loop
: play-game
	set-up-game
	loop
		loop

		# Time sync
		vf := delay
		if vf != 0 then again

		# Set clock speed
		vf := 3
		delay := vf

		get-direction
		move-player
		if is-game-over == 1 then jump play-game
	again

: main
	start-screen
	play-game

: snake-body
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: end-snake-body
